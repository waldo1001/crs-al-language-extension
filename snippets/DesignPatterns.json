{
    "Snippet (waldo): Method Codeunit": {
        "description": "Snippet (waldo): Method Codeunit (With UI)",
        "prefix": "tcodeunitMethodWithUIwaldo",
        "body": [
            "codeunit ${1:Id} \"${2:FullMethodName} Meth\"",
            "{",
            "\tinternal procedure ${3:ShortMethodName}(var ${4:VarName}: Record ${5:TableName}; HideDialog: Boolean)",
            "\tvar",
            "\t\tIsHandled: Boolean;",
            "\tbegin",
            "\t\tif not Confirm${3:ShortMethodName}(${4:VarName}, HideDialog) then exit;",
            "\t\tOnBefore${3:ShortMethodName}(${4:VarName}, IsHandled);",
            "\t\tDo${3:ShortMethodName}(${4:VarName}, IsHandled);",
            "\t\tOnAfter${3:ShortMethodName}(${4:VarName});",
            "\t\tAcknowledge${3:ShortMethodName}(${4:VarName}, HideDialog)",
            "\tend;",
            "",
            "\tlocal procedure Do${3:ShortMethodName}(var ${4:VarName}: Record ${5:TableName}; IsHandled: Boolean)",
            "\tbegin",
            "\t\tif IsHandled then",
            "\t\t\texit;",
            "\t\t",
            "\t\t${0}",
            "\tend;",
            "",
            "\tlocal procedure Confirm${3:ShortMethodName}(var ${4:VarName}: Record ${5:TableName}; HideDialog: Boolean): Boolean",
            "\tvar",
            "\t\tConfirmManagement: Codeunit \"Confirm Management\";",
            "\t\tConfirmQst: Label 'Are You Sure?';",
            "\t\tDefaultAnswer: Boolean;",
            "\tbegin",
            "\t\tDefaultAnswer := ${6:true};",
            "\t\t",
            "\t\tif HideDialog then exit(DefaultAnswer);",
            "\t\texit(ConfirmManagement.GetResponseOrDefault(ConfirmQst, DefaultAnswer));",
            "\tend;",
            "",
            "\tlocal procedure Acknowledge${3:ShortMethodName}(var ${4:VarName}: Record ${5:TableName}; HideDialog: Boolean)",
            "\tvar",
            "\t\tAcknowledgeMsg: Label 'You successfully executed \"${2:FullMethodName}\"';",
            "\tbegin",
            "\t\tif not GuiAllowed or HideDialog then exit;",
            "\t\tMessage(AcknowledgeMsg);",
            "\tend;",
            "",
            "\t[IntegrationEvent(false, false)]",
            "\tlocal procedure OnBefore${3:ShortMethodName}(var ${4:VarName}: Record ${5:TableName}; var IsHandled: Boolean)",
            "\tbegin",
            "\tend;",
            "",
            "\t[IntegrationEvent(false, false)]",
            "\tlocal procedure OnAfter${3:ShortMethodName}(var ${4:VarName}: Record ${5:TableName})",
            "\tbegin",
            "\tend;",
            "}"
        ]
    },
    "Snippet (waldo): Method Codeunit (No UI)": {
        "description": "Snippet (waldo): Method Codeunit (No UI)",
        "prefix": "tcodeunitMethodWithoutUIwaldo",
        "body": [
            "codeunit ${1:id} \"${2:Name} Meth\"",
            "{",
            "\tinternal procedure ${3:MethodName}(var ${4:VarName}: Record ${5:TableName})",
            "\tvar",
            "\t\tIsHandled : Boolean;",
            "\tbegin",
            "\t\tOnBefore${3:MethodName}(${4:VarName}, IsHandled);",
            "",
            "\t\tDo${3:MethodName}(${4:VarName}, IsHandled);",
            "",
            "\t\tOnAfter${3:MethodName}(${4:VarName});",
            "\tend;",
            "",
            "\tlocal procedure Do${3:MethodName}(var ${4:VarName}: Record ${5:TableName}; IsHandled: Boolean)",
            "\tbegin",
            "\t\tif IsHandled then",
            "\t\t\texit;",
            "",
            "\tend;",
            "",
            "\t[IntegrationEvent(false, false)]",
            "\tlocal procedure OnBefore${3:MethodName}(var ${4:VarName}: Record ${5:TableName}; var IsHandled : Boolean)",
            "\tbegin",
            "\tend;",
            "",
            "\t[IntegrationEvent(false, false)]",
            "\tlocal procedure OnAfter${3:MethodName}(var ${4:VarName}: Record ${5:TableName})",
            "\tbegin",
            "\tend;",
            "}"
        ]
    },
    "Snippet (waldo): Enable My Notifications ": {
        "description": "Snippet (waldo): Enable My Notifications",
        "prefix": "tmynotificationswaldo",
        "body": [
            "local procedure GetMyNotificationID(): Guid",
            "begin",
            "\tEXIT('${1:The guid of the notification}');",
            "end;",
            "",
            "[EventSubscriber(ObjectType::Page, Page:: \"My Notifications\", 'OnInitializingNotificationWithDefaultState', '', false, false)]",
            "local procedure \"MyNotifications.OnInitializingNotificationWithDefaultState\"()",
            "var",
            "\tMyNotifications: Record \"My Notifications\";",
            "\t${2:NotificationName}: label '${3:Notification Name}', maxlength = 128, locked = true;",
            "\t${4:DescriptionText}: label '${5:Description Text}', locked = true;",
            "begin",
            "\tMyNotifications.InsertDefaultWithTableNum(GetMyNotificationID(),",
            "\t\t\t\t\t\t\t\t\t\t\t${2:NotificationName},",
            "\t\t\t\t\t\t\t\t\t\t\t${4:DescriptionText},",
            "\t\t\t\t\t\t\t\t\t\t\tDatabase::${6:TableName});",
            "end;",
            "",
            "//Do the following to check whether the notification needs to be sent:",
            "//declare a local variable: \"MyNotifications\" ",
            "//IF NOT MyNotifications.IsEnabledForRecord(GetMyNotificationID,\"${6:TableName}\") THEN EXIT;"
        ]
    },
    "Snippet (waldo): Enable Service Connection": {
        "description": "Snippet (waldo): Enable Service Connection",
        "prefix": "tserviceconnectionwaldo",
        "body": [
            "[EventSubscriber(ObjectType::Table, Database:: \"Service Connection\", 'OnRegisterServiceConnection', '',false, false)]",
            "local procedure AddSetup_OnRegisterServiceConnection(var ServiceConnection: Record \"Service Connection\")",
            "var",
            "\tSetupRec: Record ${1:SetupRecord};",
            "\tServiceName: Label '${2:ServiceName}', locked = true;",
            "\tHostName: Label '${3:HostName}', locked = true;",
            "begin",
            "\tServiceConnection.InsertServiceConnection(ServiceConnection,",
            "\t\t\t\t\t\t\t\t\t\t\tSetupRec.RecordId(),",
            "\t\t\t\t\t\t\t\t\t\t\tServiceName,",
            "\t\t\t\t\t\t\t\t\t\t\tHostName,",
            "\t\t\t\t\t\t\t\t\t\t\tPage::${4:SetupPage});",
            "end;"
        ]
    },
    "Snippet (waldo): Create Setup Table": {
        "description": "Snippet (waldo): Create Setup Table",
        "prefix": "ttablesetupwaldo",
        "body": [
            "table ${1:id} \"${2:MyTable} Setup\"",
            "{",
            "",
            "\tfields",
            "\t{",
            "\t\tfield(1; \"Primary Key\"; Code[10])",
            "\t\t{",
            "",
            "\t\t}",
            "",
            "\t\t//You might want to add fields here",
            "",
            "\t}",
            "",
            "\tkeys",
            "\t{",
            "\t\tkey(PK; \"Primary Key\")",
            "\t\t{",
            "\t\t\tClustered = true;",
            "\t\t}",
            "\t}",
            "",
            "\tvar",
            "\t\tRecordHasBeenRead: Boolean;",
            "",
            "\tprocedure GetRecordOnce()",
            "\tbegin",
            "\t\tif RecordHasBeenRead then",
            "\t\t\texit;",
            "\t\tGet();",
            "\t\tRecordHasBeenRead := true;",
            "\tend;",
            "",
            "\tprocedure InsertIfNotExists()",
            "\tbegin",
            "\t\tReset();",
            "\t\tif not Get() then begin",
            "\t\t\tInit();",
            "\t\t\tInsert(true);",
            "\t\tend;",
            "\tend;",
            "",
            "",
            "}"
        ]
    },
    "Get Record Once": {
        "prefix": "tGetRecordOncewaldo",
        "description": "GetRecordOnce (waldo)",
        "body": [
            "var",
            "\tRecordHasBeenRead: Boolean;",
            "",
            "procedure GetRecordOnce()",
            "begin",
            "\tif RecordHasBeenRead then",
            "\t\texit;",
            "\tGet();",
            "\tRecordHasBeenRead := true;",
            "end;"
        ]
    },
    "Snippet (waldo): Create Setup Page": {
        "prefix": "tpagesetupwaldo",
        "body": [
            "page ${1:Id} \"${2:PageName} Setup\"",
            "{",
            "\t",
            "\tPageType = Card;",
            "\tSourceTable = \"${2:PageName} Setup\";",
            "\tCaption = '${2:PageName} Setup';",
            "\tInsertAllowed = false;",
            "\tDeleteAllowed = false;",
            "\tUsageCategory = Administration;",
            "",
            "\t",
            "\tlayout",
            "\t{",
            "\t\tarea(content)",
            "\t\t{",
            "\t\t\tgroup(General)",
            "\t\t\t{",
            "\t\t\t\t//You might want to add fields here",
            "\t\t\t}",
            "\t\t}",
            "\t}",
            "",
            "\ttrigger OnOpenPage()",
            "\tbegin",
            "\t\tRec.InsertIfNotExists();",
            "\tend;",
            "\t",
            "}",
            ""
        ],
        "description": "Snippet (waldo): Create Setup Page"
    },
    "Snippet (waldo): Create Headline Page": {
        "prefix": "tpageheadlinewaldo",
        "body": [
            "page ${1:Id} \"Headline RC ${2:AppName}\"\r",
            "{\r",
            "\tPageType = HeadlinePart;\r",
            "\tRefreshOnActivate = true;\r",
            "\r",
            "\tlayout\r",
            "\t{\r",
            "\t\tarea(content)\r",
            "\t\t{\r",
            "\t\t\tgroup(\"${2:AppName} Headline\")\r",
            "\t\t\t{\r",
            "\t\t\t\tVisible = ${2:AppName}HeadlineVisible;\r",
            "\t\t\t\tShowCaption = false;\r",
            "\t\t\t\tEditable = false;\r",
            "\r",
            "\t\t\t\tfield(${3:FirstInsight}; ${3:FirstInsight}Text)\r",
            "\t\t\t\t{\r",
            "\t\t\t\t\tApplicationArea = Basic, Suite;\r",
            "\t\t\t\t\ttrigger OnDrillDown();\r",
            "\t\t\t\t\tvar\r",
            "\t\t\t\t\tbegin\r",
            "\t\t\t\t\t\tOnDrillDown${3:FirstInsight}();\r",
            "\t\t\t\t\tend;\r",
            "\r",
            "\t\t\t\t}\r",
            "\t\t\t\tfield(${4:SecondInsight}; ${4:SecondInsight}Text)\r",
            "\t\t\t\t{\r",
            "\t\t\t\t\tApplicationArea = Basic, Suite;\r",
            "\t\t\t\t\ttrigger OnDrillDown();\r",
            "\t\t\t\t\tvar\r",
            "\t\t\t\t\tbegin\r",
            "\t\t\t\t\t\tOnDrillDown${4:SecondInsight}();\r",
            "\t\t\t\t\tend;\r",
            "\t\t\t\t}\r",
            "\r",
            "\t\t\t}\r",
            "\t\t}\r",
            "\t}\r",
            "\r",
            "\tvar\r",
            "\t\t[InDataSet]\r",
            "\t\t${2:AppName}HeadlineVisible: Boolean;\r",
            "\t\t${3:FirstInsight}Text: Text;\r",
            "\t\t${4:SecondInsight}Text: Text;\r",
            "\r",
            "\ttrigger OnOpenPage()\r",
            "\tbegin\r",
            "\t\tHandleVisibility();\r",
            "\r",
            "\t\tHandle${3:FirstInsight}();\r",
            "\t\tHandle${4:SecondInsight}();\r",
            "\r",
            "\t\tOnSetVisibility(${2:AppName}HeadlineVisible);\r",
            "\tend;\r",
            "\r",
            "\tlocal procedure HandleVisibility()\r",
            "\tvar\r",
            "\tbegin\r",
            "\t\t${2:AppName}HeadlineVisible := true;\r",
            "\tend;\r",
            "\r",
            "\tlocal procedure Handle${3:FirstInsight}();\r",
            "\tvar\r",
            "\t\tHeadlineManagement: Codeunit \"Headline Management\";\r",
            "\t\tPayloadText: Text;\r",
            "\t\tQualifierText: Text;\r",
            "\tbegin\r",
            "\t\tPayloadText := HeadlineManagement.Emphasize('Some text to highlight') + ' Some other text';\r",
            "\t\tQualifierText := 'Some name of the insight';\r",
            "\t\tHeadlineManagement.GetHeadlineText(QualifierText, PayloadText, ${3:FirstInsight}Text);\r",
            "\r",
            "\tend;\r",
            "\r",
            "\tlocal procedure Handle${4:SecondInsight}();\r",
            "\tvar\r",
            "\t\tHeadlineManagement: Codeunit \"Headline Management\";\r",
            "\t\tPayloadText: Text;\r",
            "\t\tQualifierText: Text;\r",
            "\tbegin\r",
            "\t\tPayloadText := HeadlineManagement.Emphasize('Some text to highlight') + ' Some other text';\r",
            "\t\tQualifierText := 'Some name of the insight';\r",
            "\t\tHeadlineManagement.GetHeadlineText(QualifierText, PayloadText, ${4:SecondInsight}Text);\r",
            "\r",
            "\tend;\r",
            "\r",
            "\tlocal procedure OnDrillDown${3:FirstInsight}();\r",
            "\tvar\r",
            "\tbegin\r",
            "\r",
            "\tend;\r",
            "\r",
            "\tlocal procedure OnDrillDown${4:SecondInsight}();\r",
            "\tvar\r",
            "\tbegin\r",
            "\r",
            "\tend;\r",
            "\r",
            "\t[IntegrationEvent(false, false)]\r",
            "\tlocal procedure OnSetVisibility(var ${2:AppName}HeadlineVisible: Boolean)\r",
            "\tbegin\r",
            "\tend;\r",
            "}"
        ],
        "description": "Snippet (waldo): Create Headline Page"
    },
    "Snippet (waldo): Create Role Center Page": {
        "prefix": "tpagerolecenterwaldo",
        "body": [
            "page ${1:Id} \"${2:AppName} Role Center\"\r",
            "{\r",
            "\tPageType = RoleCenter;\r",
            "\tCaption = '${2:AppName}';\r",
            "\r",
            "\tlayout\r",
            "\t{\r",
            "\t\tarea(RoleCenter)\r",
            "\t\t{\r",
            "\t\t\tpart(Headline; \"Headline RC ${2:AppName}\")\r",
            "\t\t\t{\r",
            "\t\t\t\tApplicationArea = Basic, Suite;\r",
            "\t\t\t}\r",
            "\t\t\tpart(Activities; \"${2:AppName} Activities\")\r",
            "\t\t\t{\r",
            "\t\t\t\tApplicationArea = Basic, Suite;\r",
            "\t\t\t}\r",
            "\t\t\tpart(\"Help And Chart Wrapper\"; \"Help And Chart Wrapper\")\r",
            "\t\t\t{\r",
            "\t\t\t\tApplicationArea = Basic, Suite;\r",
            "\t\t\t}\r",
            "\t\t\tpart(\"Report Inbox Part\"; \"Report Inbox Part\")\r",
            "\t\t\t{\r",
            "\t\t\t\tApplicationArea = Basic, Suite;\r",
            "\t\t\t}\r",
            "\t\t\tpart(\"Power BI Report Spinner Part\"; \"Power BI Report Spinner Part\")\r",
            "\t\t\t{\r",
            "\t\t\t\tApplicationArea = Basic, Suite;\r",
            "\t\t\t}\r",
            "\t\t}\r",
            "\t}\r",
            "\r",
            "\tactions\r",
            "\t{\r",
            "\t\tarea(Creation)\r",
            "\t\t{\r",
            "\t\t\taction(\"${3:AppNameDocumentCard}\")\r",
            "\t\t\t{\r",
            "\t\t\t\tRunPageMode = Create;\r",
            "\t\t\t\tCaption = '${3:AppNameDocumentCard}';\r",
            "\t\t\t\tToolTip = 'Add some tooltip here';\r",
            "\t\t\t\tImage = New;\r",
            "\t\t\t\tRunObject = page \"${3:AppNameDocumentCard}\";\r",
            "\t\t\t\tApplicationArea = Basic, Suite;\r",
            "\t\t\t}\r",
            "\t\t}\r",
            "\t\tarea(Processing)\r",
            "\t\t{\r",
            "\t\t\tgroup(New)\r",
            "\t\t\t{\r",
            "\t\t\t\taction(\"${4:AppNameMasterData}\")\r",
            "\t\t\t\t{\r",
            "\t\t\t\t\tRunPageMode = Create;\r",
            "\t\t\t\t\tCaption = '${4:AppNameMasterData}';\r",
            "\t\t\t\t\tToolTip = 'Register new ${4:AppNameMasterData}';\r",
            "\t\t\t\t\tRunObject = page \"${4:AppNameMasterData} Card\";\r",
            "\t\t\t\t\tImage = DataEntry;\r",
            "\t\t\t\t\tApplicationArea = Basic, Suite;\r",
            "\t\t\t\t}\r",
            "\t\t\t}\r",
            "\t\t\tgroup(\"${5:AppNameSomeProcess} Group\")\r",
            "\t\t\t{\r",
            "\t\t\t\taction(\"${5:AppNameSomeProcess}\")\r",
            "\t\t\t\t{\r",
            "\t\t\t\t\tCaption = '${5:AppNameSomeProcess}';\r",
            "\t\t\t\t\tToolTip = '${5:AppNameSomeProcess} description';\r",
            "\t\t\t\t\tImage = Process;\r",
            "\t\t\t\t\tRunObject = Codeunit \"${5:AppNameSomeProcess}\";\r",
            "\t\t\t\t\tApplicationArea = Basic, Suite;\r",
            "\t\t\t\t}\r",
            "\t\t\t}\r",
            "\t\t\tgroup(\"${2:AppName} Reports\")\r",
            "\t\t\t{\r",
            "\t\t\t\taction(\"${6:AppNameSomeReport}\")\r",
            "\t\t\t\t{\r",
            "\t\t\t\t\tCaption = '${6:AppNameSomeReport}';\r",
            "\t\t\t\t\tToolTip = '${6:AppNameSomeReport} description';\r",
            "\t\t\t\t\tImage = Report;\r",
            "\t\t\t\t\tRunObject = report \"${6:AppNameSomeReport}\";\r",
            "\t\t\t\t\tApplicationArea = Basic, Suite;\r",
            "\t\t\t\t}\r",
            "\t\t\t}\r",
            "\t\t}\r",
            "\t\tarea(Reporting)\r",
            "\t\t{\r",
            "\t\t\taction(\"${6:AppNameSomeReport}\")\r",
            "\t\t\t{\r",
            "\t\t\t\tCaption = '${6:AppNameSomeReport}';\r",
            "\t\t\t\tToolTip = '${6:AppNameSomeReport} description';\r",
            "\t\t\t\tImage = Report;\r",
            "\t\t\t\tRunObject = report \"${6:AppNameSomeReport}\";\r",
            "\t\t\t\tPromoted = true;\r",
            "\t\t\t\tPromotedCategory = Report;\r",
            "\t\t\t\tPromotedIsBig = true;\r",
            "\t\t\t\tApplicationArea = Basic, Suite;\r",
            "\t\t\t}\r",
            "\r",
            "\t\t}\r",
            "\t\tarea(Embedding)\r",
            "\t\t{\r",
            "\t\t\taction(\"${4:AppNameMasterData} List\")\r",
            "\t\t\t{\r",
            "\t\t\t\tRunObject = page \"${4:AppNameMasterData} List\";\r",
            "\t\t\t\tApplicationArea = Basic, Suite;\r",
            "\t\t\t}\r",
            "\r",
            "\t\t}\r",
            "\t\tarea(Sections)\r",
            "\t\t{\r",
            "\t\t\tgroup(Setup)\r",
            "\t\t\t{\r",
            "\t\t\t\tCaption = 'Setup';\r",
            "\t\t\t\tToolTip = 'Overview and change system and application settings, and manage extensions and services';\r",
            "\t\t\t\tImage = Setup;\r",
            "\r",
            "\t\t\t\taction(\"${2:AppName} Setup\")\r",
            "\t\t\t\t{\r",
            "\t\t\t\t\tToolTip = 'Setup ${2:AppName}';\r",
            "\t\t\t\t\tRunObject = Page \"${2:AppName} Setup\";\r",
            "\t\t\t\t\tApplicationArea = Basic, Suite;\r",
            "\r",
            "\t\t\t\t}\r",
            "\r",
            "\t\t\t\taction(\"Assisted Setup\")\r",
            "\t\t\t\t{\r",
            "\t\t\t\t\tToolTip = 'Set up core functionality such as sales tax, sending documents as email, and approval workflow by running through a few pages that guide you through the information.';\r",
            "\t\t\t\t\tRunObject = Page \"Assisted Setup\";\r",
            "\t\t\t\t\tApplicationArea = Basic, Suite;\r",
            "\t\t\t\t}\r",
            "\t\t\t\taction(\"Manual Setup\")\r",
            "\t\t\t\t{\r",
            "\t\t\t\t\tToolTip = 'Define your company policies for business departments and for general activities by filling setup windows manually.';\r",
            "\t\t\t\t\tRunObject = Page \"Business Setup\";\r",
            "\t\t\t\t\tApplicationArea = Basic, Suite;\r",
            "\t\t\t\t}\r",
            "\t\t\t\taction(\"Service Connections\")\r",
            "\t\t\t\t{\r",
            "\t\t\t\t\tToolTip = 'Enable and configure external services, such as exchange rate updates, Microsoft Social Engagement, and electronic bank integration.';\r",
            "\t\t\t\t\tRunObject = Page \"Service Connections\";\r",
            "\t\t\t\t\tApplicationArea = Basic, Suite;\r",
            "\t\t\t\t}\r",
            "\t\t\t}\r",
            "\t\t}\r",
            "\t}\r",
            "\r",
            "}"
        ],
        "description": "Snippet (waldo): Create Role Center Page"
    },
    "Snippet (waldo): Create Role Center Activities Cue Table": {
        "prefix": "ttableactivitieswaldo",
        "body": [
            "table ${1:Id} \"${2:AppName} Activities Cue\"\r",
            "{\r",
            "\tfields\r",
            "\t{\r",
            "\t\tfield(1; \"Primary Key\"; Code[10])\r",
            "\t\t{\r",
            "\r",
            "\t\t}\r",
            "\t\tfield(10; \"Highlighted field\"; Integer)\r",
            "\t\t{\r",
            "\t\t\tCaption = 'Highlighted field';\r",
            "\t\t\tFieldClass = FlowField;\r",
            "\t\t\tCalcFormula = ${0:Add Some Calculation Formula here}; \r",
            "\t\t\tEditable = false;\r",
            "\t\t}\r",
            "\t\tfield(11; \"Normal field\"; Decimal)\r",
            "\t\t{\r",
            "\t\t\tCaption = 'Normal field';\r",
            "\t\t\tEditable = false;\r",
            "\t\t}\r",
            "\t\tfield(12; \"Normal field With Drill-Down\"; Decimal)\r",
            "\t\t{\r",
            "\t\t\tCaption = 'Normal field With Drill-Down';\r",
            "\t\t\tEditable = false;\r",
            "\t\t}\r",
            "\t}\r",
            "\r",
            "\tkeys\r",
            "\t{\r",
            "\t\tkey(PK; \"Primary Key\")\r",
            "\t\t{\r",
            "\t\t\tClustered = true;\r",
            "\t\t}\r",
            "\t}\r",
            "\r",
            "}"
        ],
        "description": "Snippet (waldo): Create Role Center Activities Cue Table"
    },
    "Snippet (waldo): Create Role Center Activities Page": {
        "prefix": "tpageactivitieswaldo",
        "body": [
            "page ${1:Id} \"${2:AppName} Activities\"\r",
            "{\r",
            "\tCaption = '${2:AppName} Activities';\r",
            "\tPageType = CardPart;\r",
            "\tRefreshOnActivate = true;\r",
            "\tSourceTable = \"${2:AppName} Activities Cue\";\r",
            "\tShowFilter = false;\r",
            "\r",
            "\tlayout\r",
            "\t{\r",
            "\t\tarea(Content)\r",
            "\t\t{\r",
            "\t\t\tcuegroup(\"Highlited Activity\")\r",
            "\t\t\t{\r",
            "\t\t\t\tCuegroupLayout = Wide;\r",
            "\t\t\t\tfield(\"Highlighted field\"; \"Highlighted field\")\r",
            "\t\t\t\t{\r",
            "\t\t\t\t\tCaption = 'Highlighted field';\r",
            "\t\t\t\t\tApplicationArea = Basic, Suite;\r",
            "\t\t\t\t\tDrillDownPageId = SomePage;\r",
            "\t\t\t\t\tToolTip = 'Some tooltip';\r",
            "\t\t\t\t}\r",
            "\t\t\t}\r",
            "\t\t\tcuegroup(\"Normal Activity\")\r",
            "\t\t\t{\r",
            "\t\t\t\tfield(\"Normal field With Drill-Down\"; \"Normal field With Drill-Down\")\r",
            "\t\t\t\t{\r",
            "\t\t\t\t\tCaption = 'Normal field with Drill-Down Caption';\r",
            "\t\t\t\t\tApplicationArea = Basic, Suite;\r",
            "\t\t\t\t\tDrillDownPageId = SomePage;\r",
            "\t\t\t\t\tToolTip = 'Some tooltip';\r",
            "\t\t\t\t}\r",
            "\r",
            "\t\t\t\tfield(\"Normal field\"; \"Normal field\")\r",
            "\t\t\t\t{\r",
            "\t\t\t\t\tCaption = 'Normal field Caption';\r",
            "\t\t\t\t\tApplicationArea = Basic, Suite;\r",
            "\t\t\t\t\tToolTip = 'Some tooltip';\r",
            "\t\t\t\t}\r",
            "\r",
            "\t\t\t}\r",
            "\t\t}\r",
            "\t}\r",
            "\r",
            "\ttrigger OnOpenPage()\r",
            "\tbegin\r",
            "\t\tRec.Reset();\r",
            "\t\tif not Rec.Get() then begin\r",
            "\t\t\tRec.Init();\r",
            "\t\t\tRec.Insert();\r",
            "\t\tend;\r",
            "\r",
            "\tend;\r",
            "\r",
            "\ttrigger OnAfterGetRecord()\r",
            "\tbegin\r",
            "\t\tCalculateCueFieldValues();\r",
            "\tend;\r",
            "\r",
            "\tlocal procedure CalculateCueFieldValues()\r",
            "\tbegin\r",
            "\t\tif FieldActive(\"Normal field\") then\r",
            "\t\t\t\"Normal field\" := 2 + 1 //add some calculation here for normal fields;\r",
            "\tend;\r",
            "\r",
            "}"
        ],
        "description": "Snippet (waldo): Create Role Center Activities Page"
    },
    "Notification Codeunit": {
        "prefix": "tnotificationcodeunitwaldo",
        "description": "Notification Codeunit (waldo)",
        "body": [
            "codeunit ${1:id} \"${2:CodeunitName} Notification\"",
            "{",
            "\tlocal procedure SendOrRecallNotification()",
            "\tvar",
            "\t\tRec: Record \"${3:TableName}\";",
            "\tbegin",
            "\t\tRec.Get();",
            "\t\tif ${5:Condition} then",
            "\t\t\tSendNotification()",
            "\t\telse",
            "\t\t\tRecallNotification();",
            "\tend;",
            "",
            "\tlocal procedure SendNotification()",
            "\tvar",
            "\t\tmyNotification: Notification;",
            "\tbegin",
            "\t\tmyNotification.ID := NotificationIDLbl;",
            "\t\tmyNotification.Message := NotificationMsg;",
            "\t\tmyNotification.Scope := NotificationScope::LocalScope;",
            "\t\tmyNotification.AddAction(ActionTxt, Codeunit::\"${2:CodeunitName} Notification\", 'InvokeNotificationAction');",
            "\t\tmyNotification.Send();",
            "\tend;",
            "",
            "\tlocal procedure RecallNotification()",
            "\tvar",
            "\t\tCompanyInfoNotification: Notification;",
            "\tbegin",
            "\t\tCompanyInfoNotification.ID := NotificationIDLbl;",
            "\t\tCompanyInfoNotification.Recall();",
            "\tend;",
            "",
            "\tprocedure InvokeNotificationAction(myNotification: Notification)",
            "\tbegin",
            "\t\t${0://Your action here}",
            "\tend;",
            "",
            "\t[EventSubscriber(ObjectType::${6:ObjectType}, ${7:ObjectId}, '${8:Event}', '', false, false)]",
            "\tlocal procedure SendNotificationOnEvent()",
            "\tbegin",
            "\t\tSendOrRecallNotification();",
            "\tend;",
            "",
            "\tvar",
            "\t\tNotificationMsg: Label '${10:MessageText}';",
            "\t\tActionTxt: Label '${11:ActionText}';",
            "\t\tNotificationIDLbl: Label '${12:NewGuid}', locked = true;",
            "}"
        ]
    },
    "MyNotification Codeunit": {
        "prefix": "tmynotificationscodeunitwaldo",
        "description": "Notification Codeunit With 'My Notifications' implemented (waldo)",
        "body": [
            "codeunit ${1:id} \"${2:CodeunitName} Notification\"",
            "{",
            "\tlocal procedure SendOrRecallNotification()",
            "\tvar",
            "\t\tRec: Record \"${3:TableName}\";",
            "\tbegin",
            "\t\tRec.Get();",
            "\t\tif not IsNotificationEnabled(Rec) then exit;",
            "",
            "\t\tif ${5:Condition} then",
            "\t\t\tSendNotification()",
            "\t\telse",
            "\t\t\tRecallNotification();",
            "\tend;",
            "",
            "\tlocal procedure SendNotification()",
            "\tvar",
            "\t\tmyNotification: Notification;",
            "\tbegin",
            "\t\tmyNotification.ID := NotificationIDLbl;",
            "\t\tmyNotification.Message := NotificationMsg;",
            "\t\tmyNotification.Scope := NotificationScope::LocalScope;",
            "\t\tmyNotification.AddAction(ActionTxt, Codeunit::\"${2:CodeunitName} Notification\", 'InvokeNotificationAction');",
            "\t\tmyNotification.Send();",
            "\tend;",
            "",
            "\tlocal procedure RecallNotification()",
            "\tvar",
            "\t\tCompanyInfoNotification: Notification;",
            "\tbegin",
            "\t\tCompanyInfoNotification.ID := NotificationIDLbl;",
            "\t\tCompanyInfoNotification.Recall();",
            "\tend;",
            "",
            "\tprocedure InvokeNotificationAction(myNotification: Notification)",
            "\tbegin",
            "\t\t${0://Your action here}",
            "\tend;",
            "",
            "\t[EventSubscriber(ObjectType::${6:ObjectType}, ${7:ObjectId}, '${8:Event}', '', false, false)]",
            "\tlocal procedure SendNotificationOnEvent()",
            "\tbegin",
            "\t\tSendOrRecallNotification();",
            "\tend;",
            "",
            "\tlocal procedure IsNotificationEnabled(Rec: Record \"${3:TableName}): Boolean",
            "\tvar",
            "\t\tMyNotifications: Record \"My Notifications\";",
            "\tbegin",
            "\t\texit(MyNotifications.IsEnabledForRecord(NotificationIDLbl, Rec));",
            "\tend;",
            "",
            "\t[EventSubscriber(ObjectType::Page, Page:: \"My Notifications\", 'OnInitializingNotificationWithDefaultState', '', false, false)]",
            "\tlocal procedure \"MyNotifications.OnInitializingNotificationWithDefaultState\"()",
            "\tvar",
            "\t\tMyNotifications: Record \"My Notifications\";",
            "\tbegin",
            "\t\tMyNotifications.InsertDefaultWithTableNum(NotificationIDLbl,",
            "\t\t\t\t\t\t\t\t\t\t\t\tNotificationMsg,",
            "\t\t\t\t\t\t\t\t\t\t\t\tMyNotificationDescription,",
            "\t\t\t\t\t\t\t\t\t\t\t\tDatabase::\"${3:TableName}\");",
            "\tend;",
            "",
            "\tvar",
            "\t\tNotificationMsg: Label '${10:MessageText}';",
            "\t\tActionTxt: Label '${11:ActionText}';",
            "\t\tMyNotificationDescription: label '${12:MyNotificationDescription}';",
            "\t\tNotificationIDLbl: Label '${13:NewGuid}', locked = true;",
            "}"
        ]
    }
}