{
    "Snippet (waldo): Enable Assisted Setup (<15.0) ": {
        "description": "Snippet (waldo): Enable Assisted Setup (<15.0)",
        "prefix": "tassistedsetupwaldoBeforeV15",
        "body": [
            "[EventSubscriber(ObjectType::Table, Database::\"Aggregated Assisted Setup\", 'OnRegisterAssistedSetup', '', false, false)]",
            "local procedure AddExtensionAssistedSetup_OnRegisterAssistedSetup(var TempAggregatedAssistedSetup: Record \"Aggregated Assisted Setup\" TEMPORARY);",
            "var",
            "\t${2:AssistedSetupRecord}: Record ${1:\"TableName\"};",
            "begin",
            "\tTempAggregatedAssistedSetup.AddExtensionAssistedSetup(Page::${3:\"PageName\"},",
            "\t\t\t\t\t\t\t\t\t\t\t\t\t\t'${3:Text in Assisted Setup List}',",
            "\t\t\t\t\t\t\t\t\t\t\t\t\t\tTrue,",
            "\t\t\t\t\t\t\t\t\t\t\t\t\t\t${2:AssistedSetupRecord}.RecordId(),",
            "\t\t\t\t\t\t\t\t\t\t\t\t\t\tGetAssistedSetupStatus(TempAggregatedAssistedSetup),",
            "\t\t\t\t\t\t\t\t\t\t\t\t\t\t'');",
            "end;",
            "[EventSubscriber(ObjectType::Table, Database::\"Aggregated Assisted Setup\", 'OnUpdateAssistedSetupStatus', '', false, false)]",
            "local procedure AggregatedAssistedSetup_OnUpdateAssistedSetupStatus(var TempAggregatedAssistedSetup: Record \"Aggregated Assisted Setup\" TEMPORARY);",
            "begin",
            "\tTempAggregatedAssistedSetup.SetStatus(TempAggregatedAssistedSetup, PAGE::${3:\"PageName\"}, GetAssistedSetupStatus(TempAggregatedAssistedSetup));",
            "end;",
            "local procedure GetAssistedSetupStatus(AggregatedAssistedSetup: Record \"Aggregated Assisted Setup\"): Integer;",
            "var",
            "\t${2:AssistedSetupRecord}: Record ${1:\"TableName\"};",
            "begin",
            "\tWITH AggregatedAssistedSetup DO BEGIN",
            "\t\tIF ${2:AssistedSetupRecord}.Get() THEN",
            "\t\t\tStatus := Status::Completed",
            "\t\tELSE",
            "\t\t\tStatus := Status::\"Not Completed\";",
            "\t\tEXIT(Status);",
            "\tEND;",
            "end;"
        ]
    },
    "Snippet (waldo): Enable Assisted Setup (>=15.0) ": {
        "description": "Snippet (waldo): Enable Assisted Setup (>=15.0)",
        "prefix": "tassistedsetupwaldoBeforeV18",
        "body": [
            "codeunit ${1:id} \"${2:Name} Meth\"",
            "{",
            "\t[EventSubscriber(ObjectType::Codeunit, Codeunit::\"Assisted Setup\", 'OnRegister', '', false, false)]",
            "\tlocal procedure AddExtensionAssistedSetup_OnRegisterAssistedSetup();",
            "\tvar",
            "\t\tAssistedSetup: Codeunit \"Assisted Setup\";",
            "\t\tCurrentGlobalLanguage: Integer;",
            "\t\tWizardTxt: label '${3:Text in Assited Setup List}';",
            "\tbegin",
            "\t\tCurrentGlobalLanguage := GlobalLanguage();",
            "\t\tAssistedSetup.Add(GetAppId(), GetPageId(), WizardTxt, \"Assisted Setup Group\"::Extensions);",
            "\t\tGLOBALLANGUAGE(1033);",
            "\t\tAssistedSetup.AddTranslation(GetAppId(), GetPageId(), 1033, WizardTxt);",
            "",
            "\t\t\tUpdateStatus();",
            "\tend;",
            "",
            "\t//TODO: remove the following subscriber if not necessary to run",
            "\t[EventSubscriber(ObjectType::Codeunit, Codeunit::\"Assisted Setup\", 'OnReRunOfCompletedSetup', '', false, false)]",
            "\tlocal procedure OnReRunOfCompletedSetup(ExtensionId: Guid; PageID: Integer; var IsHandled: Boolean)",
            "\tvar",
            "\t\tSetupAlreadyDoneQst: Label 'This setup is already done. Do you want to open the setup page instead?';",
            "\tbegin",
            "\t\tif ExtensionId <> GetAppId() then exit;",
            "\t\tif PageID <> GetPageId() then exit;",
            "",
            "\t\tif Confirm(SetupAlreadyDoneQst, true) then",
            "\t\t\tPage.Run(GetPageId()); //TODO: Might have to be be a different page (like not the wizard, but the setup page instead)",
            "",
            "\t\tIsHandled := true;",
            "\tend;",
            "",
            "\t//TODO: remov the following subscriber if not necessary to run ",
            "\t[EventSubscriber(ObjectType::Codeunit, Codeunit::\"Assisted Setup\", 'OnAfterRun', '', false, false)]",
            "\tlocal procedure OnAfterRunOfSetup(ExtensionID: Guid; PageID: Integer)",
            "\tbegin",
            "\t\tif ExtensionId <> GetAppId() then exit;",
            "\t\tif PageID <> GetPageId() then exit;",
            "",
            "\t\t//TODO: put code here to run 'OnAfterRun' ",
            "\tend;",
            "",
            "\tprocedure UpdateStatus()",
            "\tvar",
            "\t\tRec: Record \"Just Some Table\";",
            "\t\tAssistedSetup: Codeunit \"Assisted Setup\";",
            "\tbegin",
            "\t\tif not Rec.Get() then exit;",
            "",
            "\t\tif Rec.Description.ToLower().EndsWith('waldo.be') then  //TODO: You probably are going to want to change this ;-)",
            "\t\t\tAssistedSetup.Complete(GetAppId(), GetPageId());",
            "\tend;",
            "",
            "\tlocal procedure GetAppId(): Guid",
            "\tvar",
            "\t\tEmptyGuid: Guid;",
            "\t\tInfo: ModuleInfo;",
            "\tbegin",
            "\t\tif Info.Id() = EmptyGuid then",
            "\t\t\tNavApp.GetCurrentModuleInfo(Info);",
            "\t\texit(Info.Id());",
            "\tend;",
            "",
            "\tlocal procedure GetPageId(): Integer",
            "\tbegin",
            "\t\texit(page::\"${4:Your Wizard}\");",
            "\tend;",
            "",
            "\t//TODO: Call \"SomeAssistedSetup.UpdateStatus(); in case the wizard is run without the assisted setup.  It should call the \"UpdateStatus\" of this codeunit.",
            "}",
            ""
        ]
    },
    "Snippet (waldo): Enable Assisted Setup (>=18.0) ": {
        "description": "Snippet (waldo): Enable Assisted Setup (>=18.0)",
        "prefix": "tassistedsetupwaldo",
        "body": [
            "codeunit ${1:id} \"${2:Object Name}\"",
            "{",
            "\t[EventSubscriber(ObjectType::Codeunit, Codeunit::\"Guided Experience\", 'OnRegisterAssistedSetup', '', false, false)]",
            "\tlocal procedure AddExtensionAssistedSetup_OnRegisterAssistedSetup();",
            "\tvar",
            "\t\tGuidedExperience: Codeunit \"Guided Experience\";",
            "\t\tTitleLbl: Label '${3:Assisted Setup Title}';",
            "\t\tShortTitleLbl: Label '${4:Assisted Setup Short Title}';",
            "\t\tDescriptionLbl: Label '${5:Assisted Setup Description}';",
            "\tbegin",
            "\t\tGuidedExperience.InsertAssistedSetup(",
			"\t\t\tTitleLbl,",
			"\t\t\tShortTitleLbl,",
			"\t\t\tDescriptionLbl,",
			"\t\t\t${6:Duration in Minutes},",
			"\t\t\tObjectType::Page,",
			"\t\t\tGetPageId(),",
			"\t\t\t\"Assisted Setup Group\"::Extensions,",
			"\t\t\t'https://www.youtube.com/embed/fitTMAwHcJw',",
			"\t\t\t\"Video Category\"::Uncategorized,",
			"\t\t\t'https://www.waldo.be');",
            "",
            "\t\tUpdateStatus();",
            "\tend;",
            "",
            "\t//TODO: remove the following subscriber if not necessary to run",
            "\t[EventSubscriber(ObjectType::Codeunit, Codeunit::\"Guided Experience\", 'OnReRunOfCompletedAssistedSetup', '', false, false)]",
            "\tlocal procedure OnReRunOfCompletedSetup(ExtensionID: Guid; ObjectType: ObjectType; ObjectID: Integer; var Handled: Boolean)",
            "\tvar",
            "\t\tSetupAlreadyDoneQst: Label 'This setup is already done. Do you want to open the setup page instead?';",
            "\tbegin",
            "\t\tif ExtensionID <> GetAppId() then exit;",
            "\t\tif ObjectType <> ObjectType::Page then exit;",
            "\t\tif ObjectID <> GetPageId() then exit;",
            "",
            "\t\tif Confirm(SetupAlreadyDoneQst, true) then",
            "\t\t\tPage.Run(GetPageId()); //TODO: Might have to be be a different page (like not the wizard, but the setup page instead)",
            "",
            "\t\tHandled := true;",
            "\tend;",
            "",
            "\t//TODO: remove the following subscriber if not necessary to run ",
            "\t[EventSubscriber(ObjectType::Codeunit, Codeunit::\"Guided Experience\", 'OnAfterRunAssistedSetup', '', false, false)]",
            "\tlocal procedure OnAfterRunOfSetup(ExtensionID: Guid; ObjectType: ObjectType; ObjectID: Integer)",
            "\tbegin",
            "\t\tif ExtensionID <> GetAppId() then exit;",
            "\t\tif ObjectID <> GetPageId() then exit;",
            "",
            "\t\t//TODO: put code here to run 'OnAfterRunAssistedSetup' ",
            "\tend;",
            "",
            "\tprocedure UpdateStatus()",
            "\tvar",
            "\t\tRec: Record \"${8:Just Some Table}\";",
            "\t\tGuidedExperience: Codeunit \"Guided Experience\";",
            "\tbegin",
            "\t\tif not Rec.Get() then exit;",
            "",
            "\t\tif Rec.Description.ToLower().EndsWith('waldo.be') then  //TODO: You probably are going to want to change this ;-)",
            "\t\t\tGuidedExperience.CompleteAssistedSetup(ObjectType::Page, GetPageId());",
            "\tend;",
            "",
            "\tlocal procedure GetAppId(): Guid",
            "\tvar",
            "\t\tEmptyGuid: Guid;",
            "\t\tInfo: ModuleInfo;",
            "\tbegin",
            "\t\tif Info.Id() = EmptyGuid then",
            "\t\t\tNavApp.GetCurrentModuleInfo(Info);",
            "\t\texit(Info.Id());",
            "\tend;",
            "",
            "\tlocal procedure GetPageId(): Integer",
            "\tbegin",
            "\t\texit(Page::\"${7:Your Wizard}\");",
            "\tend;",
            "",
            "\t//TODO: Call \"SomeAssistedSetup.UpdateStatus(); in case the wizard is run without the assisted setup.  It should call the \"UpdateStatus\" of this codeunit.",
            "}",
            ""
        ]
    },
    "Snippet (waldo): Checklist Insert - Link": {
        "description": "Snippet (waldo): Checklist Insert - Link",
        "prefix": "tChecklistInsertLink",
        "body": [
          "Checklist.Insert(Enum::\"Guided Experience Type\"::${1:}, ${2:Link}, ${3:OrderID}, TempAllProfile, ${4|true,false|});"
        ]
    },
    "Snippet (waldo): Checklist Insert - Page": {
        "description": "Snippet (waldo): Checklist Insert - Page",
        "prefix": "tChecklistInsertPage",
        "body": [
          "Checklist.Insert(Enum::\"Guided Experience Type\"::${1:}, ObjectType::Page, Page::${2}, ${3:OrderID}, TempAllProfile, ${4|true,false|});"
        ]
    },
    "Snippet (waldo): Checklist Insert (SpotlightTourType)": {
        "description": "Snippet (waldo): Checklist Insert (SpotlightTourType)",
        "prefix": "tChecklistInsertSpotlightTourType",
        "body": [
          "Checklist.Insert(Page::${1}, Enum::\"Spotlight Tour Type\"::${2:}, ${3:OrderID}, TempAllProfile, ${4|true,false|});"
        ]
    },
    "Snippet (waldo): Checklist Codeunit": {
        "description": "Snippet (waldo): Checklist Codeunit",
        "prefix": "tChecklistCodeunit",
        "body": [
          "codeunit ${1:id} \"${2:Object Name}\"",
          "{",
          "    var",
          "        MSLearnLinkTxt: Label 'https://go.microsoft.com/fwlink/?linkid=2152979', Locked = true;",
          "",
          "    [EventSubscriber(ObjectType::Codeunit, Codeunit::\"System Initialization\", 'OnAfterLogin', '', false, false)]",
          "    local procedure OnAfterLogIn()",
          "    var",
          "        Company: Record Company;",
          "        SignupContextValues: Record \"Signup Context Values\";",
          "        Checklist: Codeunit Checklist;",
          "        SystemInitialization: Codeunit \"System Initialization\";",
          "    begin",
          "        if not (Session.CurrentClientType() in [ClientType::Web, ClientType::Windows, ClientType::Desktop]) then",
          "            exit;",
          "",
          "        if not Checklist.ShouldInitializeChecklist(false) then",
          "            exit;",
          "",
          "        if not Company.Get(CompanyName()) then",
          "            exit;",
          "",
          "        if SystemInitialization.ShouldCheckSignupContext() then",
          "            if SignupContextValues.Get() then",
          "                if not (SignupContextValues.\"Signup Context\" in [SignupContextValues.\"Signup Context\"::\" \", SignupContextValues.\"Signup Context\"::\"Viral Signup\"]) then",
          "                    exit;",
          "",
          "        Checklist.InitializeGuidedExperienceItems();",
          "",
          "        if Company.\"Evaluation Company\" then",
          "            InitializeChecklistForEvaluationCompanies()",
          "        else",
          "            InitializeChecklistForNonEvaluationCompanies();",
          "",
          "        Checklist.MarkChecklistSetupAsDone();",
          "    end;",
          "",
          "    local procedure InitializeChecklistForEvaluationCompanies()",
          "    var",
          "        TempAllProfiles: Record \"All Profile\" temporary;",
          "        TempAllProfileBusinessManagerEval: Record \"All Profile\" temporary;",
          "        Checklist: Codeunit Checklist;",
          "        TenantLicenseState: Codeunit \"Tenant License State\";",
          "        GuidedExperienceType: Enum \"Guided Experience Type\";",
          "        SpotlightTourType: Enum \"Spotlight Tour Type\";",
          "    begin",
          "        // Business Manager",
          "        GetRolesForEvaluationCompany(TempAllProfileBusinessManagerEval);",
          "        Checklist.Insert(GuidedExperienceType::Tour, ObjectType::Page, Page::\"Educator Role Center\", 1000, TempAllProfileBusinessManagerEval, true);",
          "        Checklist.Insert(GuidedExperienceType::\"Assisted Setup\", ObjectType::Page, Page::\"Assisted Company Setup Wizard\", 1000, TempAllProfileBusinessManagerEval, false);",
          "        Checklist.Insert(Page::\"Customer List\", SpotlightTourType::\"Open in Excel\", 2000, TempAllProfileBusinessManagerEval, true);",
          "        Checklist.Insert(GuidedExperienceType::Video, MSLearnLinkTxt, 4000, TempAllProfileBusinessManagerEval, true);",
          "        if not TenantLicenseState.IsPaidMode() then",
          "            Checklist.Insert(Enum::\"Guided Experience Type\"::Learn, MSLearnLinkTxt, 9000, TempAllProfileBusinessManagerEval, true);",
          "",
          "        // You might want to add a few more Checklists for other profiles.",
          "",
          "        // All Profiles",
          "        GetAllRoles(TempAllProfiles);",
          "        Checklist.Insert(GuidedExperienceType::Learn, MSLearnLinkTxt, 8000, TempAllProfiles, true);",
          "    end;",
          "",
          "    local procedure InitializeChecklistForNonEvaluationCompanies()",
          "    var",
          "        TempAllProfiles: Record \"All Profile\" temporary;",
          "        TempAllProfileBusinessManager: Record \"All Profile\" temporary;",
          "        Checklist: Codeunit Checklist;",
          "        GuidedExperienceType: Enum \"Guided Experience Type\";",
          "    begin",
          "        // Business Manager",
          "        GetBussinesManagerRole(TempAllProfileBusinessManager);",
          "        Checklist.Insert(GuidedExperienceType::Tour, ObjectType::Page, Page::\"Educator Role Center\", 500, TempAllProfileBusinessManager, true);",
          "        Checklist.Insert(GuidedExperienceType::\"Assisted Setup\", ObjectType::Page, Page::\"Assisted Company Setup Wizard\", 1000, TempAllProfileBusinessManager, false);",
          "        Checklist.Insert(GuidedExperienceType::Video, MSLearnLinkTxt, 4000, TempAllProfileBusinessManager, true);",
          "",
          "        // You might want to add a few more Checklists for other profiles.",
          "",
          "        // All Profiles",
          "        GetAllRoles(TempAllProfiles);",
          "        Checklist.Insert(GuidedExperienceType::Learn, MSLearnLinkTxt, 8000, TempAllProfiles, true);",
          "    end;",
          "",
          "    local procedure GetAllRoles(var TempAllProfiles: Record \"All Profile\" temporary)",
          "    begin",
          "        AddRoleToList(TempAllProfiles, Page::\"Business Manager Role Center\");",
          "    end;",
          "",
          "    local procedure GetBussinesManagerRole(var TempAllProfile: Record \"All Profile\" temporary)",
          "    begin",
          "        AddRoleToList(TempAllProfile, Page::\"Educator Role Center\");",
          "    end;",
          "",
          "    local procedure GetRolesForEvaluationCompany(var TempAllProfile: Record \"All Profile\" temporary)",
          "    begin",
          "        // AddRoleToList(TempAllProfile, 'insert_ProfileID_here');",
          "    end;",
          "",
          "    local procedure AddRoleToList(var TempAllProfile: Record \"All Profile\" temporary; RoleCenterID: Integer)",
          "    var",
          "        AllProfile: Record \"All Profile\";",
          "    begin",
          "        AllProfile.SetRange(\"Role Center ID\", RoleCenterID);",
          "        AddRoleToList(AllProfile, TempAllProfile);",
          "    end;",
          "",
          "    local procedure AddRoleToList(var TempAllProfile: Record \"All Profile\" temporary; ProfileID: Code[30])",
          "    var",
          "        AllProfile: Record \"All Profile\";",
          "    begin",
          "        AllProfile.SetRange(\"Profile ID\", ProfileID);",
          "        AddRoleToList(AllProfile, TempAllProfile);",
          "    end;",
          "",
          "    local procedure AddRoleToList(var AllProfile: Record \"All Profile\"; var TempAllProfile: Record \"All Profile\" temporary)",
          "    begin",
          "        if AllProfile.FindFirst() then begin",
          "            TempAllProfile.TransferFields(AllProfile);",
          "            TempAllProfile.Insert();",
          "        end;",
          "    end;",
          "}"
        ]
    },
    "Snippet (waldo): Set Signup Context": {
        "description": "Snippet (waldo): Set Signup Context",
        "prefix": "tSetSignupContext",
        "body": [
          "[EventSubscriber(ObjectType::Codeunit, Codeunit::\"System Initialization\", 'OnSetSignupContext', '', false, false)]",
          "local procedure SetSignupContext()",
          "var",
          "\tAllProfile: Record \"All Profile\";",
          "\tSignupContext: Record \"Signup Context\";",
          "\tSignupContextValues: Record \"Signup Context Values\";",
          "\tChecklist: Codeunit Checklist;",
          "\tGuidedExperienceType: Enum \"Guided Experience Type\";",
          "\tSpotlightTourType: Enum \"Spotlight Tour Type\";",
          "\tOnboardingSampleValueTxt: Label 'bcsamples-onboarding', Locked = true;",
          "begin",
          "\tif not SignupContext.Get('name') then",
          "\t\texit;",
          "",
          "\tif not (LowerCase(SignupContext.Value) = OnboardingSampleValueTxt) then",
          "\t\texit;",
          "",
          "\tClear(SignupContextValues);",
          "\tif not SignupContextValues.IsEmpty() then",
          "\t\texit;",
          "",
          "\tSignupContext.Reset();",
          "\tSignupContext.SetRange(SignupContext.KeyName, 'users');",
          "\tSignupContext.SetRange(SignupContext.Value, '10-25');",
          "\tif not SignupContext.IsEmpty() then begin",
          "\t\tChecklist.Insert(Page::\"Vendor List\", SpotlightTourType::\"Open in Excel\", 1000, AllProfile, false);",
          "\t\tChecklist.Insert(GuidedExperienceType::Video, 'https://www.youtube.com/embed/nqM79hlHuOs', 8000, AllProfile, false);",
          "\tend;",
          "end;"
        ]
    },
    "Snippet (waldo): Update Banner Labels": {
        "description": "Snippet (waldo): Update Banner Labels",
        "prefix": "tUpdateBannerLabels",
        "body": [
          "[EventSubscriber(ObjectType::Codeunit, Codeunit::\"Checklist Banner\", 'OnBeforeUpdateBannerLabels', '', false, false)]",
          "local procedure OnBeforeUpdateBannerLabels(var IsHandled: Boolean; IsEvaluationCompany: Boolean; var TitleTxt: Text; var TitleCollapsedTxt: Text; var HeaderTxt: Text; var HeaderCollapsedTxt: Text; var DescriptionTxt: Text)",
          "var",
          "\tUser: Record User;",
          "\tTitle: Label 'Welcome %1!', Comment = '%1 = user full name';",
          "\tTitleCollapsed: Label 'My collapsed title';",
          "\tHeader: Label 'My Header';",
          "\tHeaderCollapsed: Label 'My collapsed header';",
          "\tDescription: Label 'My description';",
          "begin",
          "\tIsHandled := true;",
          "",
          "\tUser.SetRange(User.\"User Security ID\", Database.UserSecurityId());",
          "\tUser.FindFirst();",
          "",
          "\tTitleTxt := StrSubstNo(Title, User.\"Full Name\");",
          "\tTitleCollapsedTxt := TitleCollapsed;",
          "\tHeaderTxt := Header;",
          "\tHeaderCollapsedTxt := HeaderCollapsed;",
          "\tDescriptionTxt := Description;",
          "end;"
        ]
    },
    "Snippet (waldo): Guided Experience: Insert Application Feature": {
        "description": "Snippet (waldo): Guided Experience: Insert Application Feature",
        "prefix": "tGuidedExperienceInsertApplicationFeature",
        "body": [
            "GuidedExperience.InsertApplicationFeature(${1:Title}, ${2:ShortTitle}, ${3:Description}, ${4:ExpectedDuration}, ObjectType::${5:}, ${6:ObjectType}::${7:});"
        ]
    },
    "Snippet (waldo): Guided Experience: Insert Assisted Setup": {
        "description": "Snippet (waldo): Guided Experience: Insert Assisted Setup",
        "prefix": "tGuidedExperienceInsertAssistedSetup",
        "body": [
            "GuidedExperience.InsertAssistedSetup(${1:Title}, ${2:ShortTitle}, ${3:Description}, ${4:ExpectedDuration}, ObjectType::${5:}, ${6:ObjectType}::${7:}, Enum::\"Assisted Setup Group\"::\"${8}, ${9:VideoUrl}, Enum::\"Video Category\"::${10:}, ${11:HelpUrl});"
        ]
    },
    "Snippet (waldo): Guided Experience: Insert Learn Link": {
        "description": "Snippet (waldo): Guided Experience: Insert Learn Link",
        "prefix": "tGuidedExperienceInsertLearnLink",
        "body": [
            "GuidedExperience.InsertLearnLink(${1:Title}, ${2:ShortTitle}, ${3:Description}, ${4:ExpectedDuration}, ${5:Link});"
        ]
    },
    "Snippet (waldo): Guided Experience: Insert Manual Setup": {
        "description": "Snippet (waldo): Guided Experience: Insert Manual Setup",
        "prefix": "tGuidedExperienceInsertManualSetup",
        "body": [
            "GuidedExperience.InsertManualSetup(${1:Title}, ${2:ShortTitle}, ${3:Description}, ${4:ExpectedDuration}, ObjectType::${5:}, ${6:ObjectType}::${7:}, Enum::\"Manual Setup Category\"::${8:}, ${9:Keywords});"
        ]
    },
    "Snippet (waldo): Guided Experience: Insert Spotlight Tour": {
        "description": "Snippet (waldo): Guided Experience: Insert Spotlight Tour",
        "prefix": "tGuidedExperienceInsertSpotlightTour",
        "body": [
            "GuidedExperience.InsertSpotlightTour(${1:Title}, ${2:ShortTitle}, ${3:Description}, ${4:ExpectedDuration}, Page::${5:}, Enum::\"Spotlight Tour Type\"::${8:}, ${9:SpotlightTourTexts});"
        ]
    },
    "Snippet (waldo): Guided Experience: Insert Tour": {
        "description": "Snippet (waldo): Guided Experience: Insert Tour",
        "prefix": "tGuidedExperienceInsertTour",
        "body": [
            "GuidedExperience.InsertTour(${1:Title}, ${2:ShortTitle}, ${3:Description}, ${4:ExpectedDuration}, Page::${5:});"
        ]
    },
    "Snippet (waldo): Guided Experience: Insert Video": {
        "description": "Snippet (waldo): Guided Experience: Insert Video",
        "prefix": "tGuidedExperienceInsertVideo",
        "body": [
            "GuidedExperience.InsertVideo(${1:Title}, ${2:ShortTitle}, ${3:Description}, ${4:ExpectedDuration}, ${5:VideoUrl}, Enum::\"Video Category\"::${6:});"
        ]
    }
}